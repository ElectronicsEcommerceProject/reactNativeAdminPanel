ecommerce-admin-panel/
│
├── android/ // Android build files - React Native automatically generates
├── ios/ // iOS build files - React Native automatically generates  
├── node_modules/ // Dependencies install hote hain yahan
│
├── .env // Environment variables - API_URL=https://api.mystore.com, JWT_SECRET=xyz123
├── .eslintrc.js // Code quality rules - semicolon, quotes, spacing ke rules
├── .prettierrc // Code formatting - tab size, line length, bracket spacing
├── app.json // App metadata - name: "Electronics Admin", version: "1.0.0"
├── babel.config.js // JavaScript transpiler config - ES6 to ES5 conversion
├── index.js // React Native entry point - AppRegistry.registerComponent('App', () => App)
├── metro.config.js // Bundler configuration - asset extensions, transformer options
└── package.json // Dependencies list - react-native, redux, axios versions
│
└── src/  // Aapke app ka saara main code is folder ke andar rehta hai.
    │
    ├── App.src.jsx // MAIN APP COMPONENT - Navigation setup, Redux Provider, Theme Provider
    │
    ├── api/ // Backend server se communicate karne ka saara logic.
    │   ├── axiosConfig.api.js // Base URL, headers, interceptors - baseURL: 'https://api.electronics.com'
    │   ├── auth.api.js // login(), logout(), refreshToken() - POST /auth/login
    │   ├── banner.api.js // getBanners(), createBanner(), deleteBanner() - home page banners
    │   ├── category.api.js // getCategories(), addCategory() - Mobiles, Laptops, TVs
    │   ├── coupon.api.js // getCoupons(), createCoupon() - SAVE20, ELECTRONICS50
    │   ├── notification.api.js // sendNotification(), getNotifications() - push notifications
    │   ├── order.api.js // getOrders(), updateOrderStatus() - pending, shipped, delivered
    │   ├── product.api.js // getProducts(), addProduct(), updateProduct() - iPhone, Samsung TV
    │   └── user.api.js // getUsers(), blockUser(), getUserDetails() - customer management
    │
    ├── assets/ // Static files - images, fonts, icons.
    │   ├── fonts/ // Roboto-Regular.ttf, Poppins-Bold.ttf - custom fonts
    │   ├── icons/ // home.png, product.png, order.png - navigation icons
    │   └── images/ // logo.png, placeholder.jpg, banner-default.jpg
    │
    ├── components/ // Reusable UI components - har screen mein use hote hain.
    │   ├── common/
    │   │   ├── AppButton.common.jsx // Custom button - primary, secondary, danger styles
    │   │   ├── AppInput.common.jsx // Text input - email, password, search fields
    │   │   └── AppLoader.common.jsx // Loading spinner - API calls ke time dikhta hai
    │   └── layout/
    │       ├── Header.layout.jsx // Top bar - title, back button, menu icon
    │       └── ScreenWrapper.layout.jsx // Screen container - padding, safe area, background
    │
    ├── config/ // App ki global settings aur constants.
    │   ├── colors.config.js // Color palette - PRIMARY: '#007AFF', SUCCESS: '#28A745'
    │   ├── constants.config.js // App constants - API_TIMEOUT: 10000, PAGE_SIZE: 20
    │   └── typography.config.js // Font sizes - HEADING: 24, BODY: 16, CAPTION: 12
    │
    ├── features/ // <<< APP KA MAIN LOGIC - Har feature independent module hai.
    │   │
    │   ├── auth/ // Login/Logout functionality.
    │   │   └── screens/
    │   │       ├── login.screens.jsx // Email/password form, validation, API call
    │   │       └── login.styles.screens.js // Login screen ki styling - form, buttons
    │   │
    │   ├── dashboard/ // Admin panel ka home screen - overview dikhata hai.
    │   │   ├── screens/
    │   │   │   ├── dashboard.screens.jsx // Stats cards, charts, recent orders
    │   │   │   └── dashboard.styles.screens.js // Dashboard layout styling
    │   │   └── components/
    │   │       ├── StatCard.components.jsx // Total Orders: 1,234, Revenue: ₹50,000
    │   │       └── SalesChart.components.jsx // Monthly sales graph, daily orders chart
    │   │
    │   ├── products/ // Electronics products management - mobiles, laptops, TVs.
    │   │   ├── screens/
    │   │   │   ├── productList.screens.jsx // All products list, search, filter by category
    │   │   │   └── addEditProduct.screens.jsx // Add iPhone 15, edit Samsung TV price
    │   │   └── components/
    │   │       └── productCard.components.jsx // Product tile - image, name, price, stock
    │   │
    │   ├── orders/ // Customer orders management - pending to delivered.
    │   │   ├── screens/
    │   │   │   ├── orderList.screens.jsx // All orders, filter by status, date range
    │   │   │   └── orderDetail.screens.jsx // Order #12345 details, customer info, items
    │   │   └── components/
    │   │       ├── orderCard.components.jsx // Order summary - ID, customer, total, status
    │   │       └── orderStatusChip.components.jsx // Pending (orange), Shipped (blue), Delivered (green)
    │   │
    │   ├── users/ // Customer management - view, block, unblock users.
    │   │   ├── screens/
    │   │   │   ├── userList.screens.jsx // All customers, search by name/email
    │   │   │   └── userDetail.screens.jsx // Customer profile, order history, block option
    │   │   └── components/
    │   │       └── userCard.components.jsx // User tile - avatar, name, email, join date
    │   │
    │   ├── categories/ // Product categories - Mobiles, Laptops, TVs, Accessories.
    │   │   ├── screens/
    │   │   │   ├── categoryList.screens.jsx // All categories, add new, edit existing
    │   │   │   └── addEditCategory.screens.jsx // Create 'Smart Watches' category with icon
    │   │   └── components/
    │   │       └── categoryCard.components.jsx // Category tile - icon, name, product count
    │   │
    │   ├── banners/ // Home screen banners - sale announcements, featured products.
    │   │   ├── screens/
    │   │   │   ├── bannerList.screens.jsx // Active banners, create new, delete old
    │   │   │   └── addEditBanner.screens.jsx // Upload image, set link, schedule dates
    │   │   └── components/
    │   │       └── bannerCard.components.jsx // Banner preview - image, title, active status
    │   │
    │   ├── coupons/ // Discount coupons - SAVE20, ELECTRONICS50, NEWUSER.
    │   │   ├── screens/
    │   │   │   ├── couponList.screens.jsx // All coupons, active/expired, usage stats
    │   │   │   └── addEditCoupon.screens.jsx // Create 'DIWALI30' - 30% off, min ₹5000
    │   │   └── components/
    │   │       └── couponCard.components.jsx // Coupon tile - code, discount, expiry, usage
    │   │
    │   └── settings/ // App configuration - profile, notifications, logout.
    │       └── screens/
    │           └── settings.screens.jsx // Admin profile, change password, app version
    │
    ├── hooks/ // Reusable logic - API calls, form handling.
    │   ├── useApi.hooks.js // API state management - loading, data, error handling
    │   └── useDebounce.hooks.js // Search optimization - wait 500ms before API call
    │
    ├── navigation/ // Screen routing - login flow, main app navigation.
    │   ├── AppNavigator.navigation.jsx // Root navigator - auth check, route to login/main
    │   ├── AuthStack.navigation.jsx // Login screens - login, forgot password
    │   └── MainDrawer.navigation.jsx // Sidebar menu - Dashboard, Products, Orders, Users
    │
    ├── services/ // Background tasks - analytics, local storage.
    │   ├── analytics.services.js // Track events - 'product_added', 'order_updated'
    │   └── storage.services.js // AsyncStorage wrapper - save token, user preferences
    │
    ├── store/ // Global state management - user data, app state.
    │   ├── store.store.js // Redux store configuration - middleware, devtools
    │   └── features/ // State slices - each feature ka apna state.
    │       ├── auth.slice.features.js // Login state - user, token, isAuthenticated
    │       ├── product.slice.features.js // Products list, selected product, loading
    │       ├── order.slice.features.js // Orders list, order details, status updates
    │       └── user.slice.features.js // Users list, selected user, block/unblock
    │
    ├── types/ // Data structure definitions - API response types.
    │   ├── index.types.d.ts // Common types - User, ApiResponse, NavigationProps
    │   ├── product.types.js // Product shape - id, name, price, category, stock
    │   └── order.types.js // Order shape - id, userId, items[], total, status
    │
    └── utils/ // Helper functions - formatting, validation.
        ├── formatters.utils.js // formatPrice(1234) → '₹1,234', formatDate()
        └── validators.utils.js // validateEmail(), validatePhone(), validateRequired()